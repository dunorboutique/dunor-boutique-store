---
import CldImage from "@components/ui/CldImage.astro"

interface Props {
  images: {
    src: string
    name: string
  }[]
}
const { images } = Astro.props
---

<div class="relative flex w-full overflow-x-hidden" data-carousel>
  <button
    type="button"
    title="Flecha izquierda"
    class="opacity-50 sm:p-4 text-gray-700 bg-gray-100 z-10 hover:opacity-100 focus-visible:opacity-100 focus-visible:outline-2 focus-visible:outline-dashed focus-visible:-outline-offset-4"
    data-carousel-button="prev"
  >
    <svg
      xmlns="http://www.w3.org/2000/svg"
      fill="none"
      viewBox="0 0 24 24"
      width="32"
      height="32"
      stroke-width="2"
      stroke="currentColor"
    >
      <path stroke-linecap="round" stroke-linejoin="round" d="M10.5 19.5L3 12m0 0l7.5-7.5M3 12h18"
      ></path>
    </svg>
  </button>
  <ul
    data-slider
    style="--slider-index:0; --items-count:3;"
    class="grow flex translate-x-[calc(var(--slider-index)*-100%)] transition-transform duration-200 ease-out"
  >
    {
      images.map(({ name, src }) => {
        return (
          <li class="relative flex-[0_0_calc(100%/var(--items-count))] max-w-[calc(100%/var(--items-count))] px-2 py-[clamp(2rem,2.25vh,2.5rem)]">
            <CldImage
              src={src}
              width={800}
              height={800}
              alt={`Modelo ${name}`}
              class="w-full aspect-square"
            />
            <span class="absolute bottom-0 block w-full text-[clamp(1rem,2.25vw,1.5rem)] text-center">
              {name}
            </span>
          </li>
        )
      })
    }
  </ul>
  <button
    type="button"
    title="Flecha derecha"
    class="opacity-50 sm:p-4 text-gray-700 bg-gray-100 z-10 hover:opacity-100 focus-visible:opacity-100 focus-visible:outline-2 focus-visible:outline-dashed focus-visible:-outline-offset-4"
    data-carousel-button="next"
  >
    <svg
      xmlns="http://www.w3.org/2000/svg"
      fill="none"
      viewBox="0 0 24 24"
      width="32"
      height="32"
      stroke-width="2"
      stroke="currentColor"
    >
      <path stroke-linecap="round" stroke-linejoin="round" d="M13.5 4.5L21 12m0 0l-7.5 7.5M21 12H3"
      ></path>
    </svg>
  </button>
</div>

<script>
  const carouselButtons = document.querySelectorAll<HTMLButtonElement>("[data-carousel-button]")
  carouselButtons.forEach(button => {
    button.addEventListener("click", () => {
      const offset = button.dataset.carouselButton === "next" ? 1 : -1
      const slider = button
        .closest("[data-carousel]")!
        .querySelector("[data-slider]")! as HTMLUListElement

      const sliderIndex = parseInt(getComputedStyle(slider).getPropertyValue("--slider-index"))
      const itemsCount = parseInt(getComputedStyle(slider).getPropertyValue("--items-count"))
      const maxSlideIndex = slider.children.length / itemsCount - 1

      if (sliderIndex + offset < 0) {
        slider.style.setProperty("--slider-index", `${maxSlideIndex}`)
      } else if (sliderIndex + offset > maxSlideIndex) {
        slider.style.setProperty("--slider-index", `${0}`)
      } else {
        slider.style.setProperty("--slider-index", `${sliderIndex + offset}`)
      }
    })
  })

  window.addEventListener("resize", () => {
    const slider = document.querySelector("[data-slider]")! as HTMLUListElement
    if (window.innerWidth < 540) {
      slider.style.setProperty("--items-count", `${1}`)
    }
    else if (window.innerWidth < 900) {
      slider.style.setProperty("--items-count", `${2}`)
    }
    else if (window.innerWidth < 1200) {
      slider.style.setProperty("--items-count", `${3}`)
    }
    else {
      slider.style.setProperty("--items-count", `${4}`)
    }
  })
</script>
