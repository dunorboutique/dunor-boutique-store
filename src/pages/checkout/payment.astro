---
import Layout from "@layouts/Layout.astro"
import Button from "@ui/Button.astro"
import InputField from "@ui/InputField.astro"
import Toast from "@ui/Toast.astro"
import { getUserInfo, isUserSigned, cleanSession } from "@lib/auth"

const { cookies, redirect } = Astro
if (!isUserSigned(cookies)) redirect("/auth/login")

const user = await getUserInfo(cookies)
if (!user) {
  cleanSession(cookies)
  return redirect("/auth/login")
}
const { id: userId, fullName, email } = user
const paymentAvailable = false
---

<Layout title="Información de Pago" normalHeader>
  <main
    class="grow flex flex-col gap-10 md:gap-20 lg:gap-12 pt-8 pb-32 px-6 xs:px-10 mx-auto w-full max-w-6xl"
  >
    <header class="text-balance">
      <h1 class="text-3xl font-semibold text-dunor-black">Confirmación de Pedido</h1>
      <p class="text-neutral-600">A continuación, ingresa tus datos para completar la compra.</p>
    </header>
    <section class="flex flex-wrap-reverse md:flex-nowrap gap-16 lg:gap-32 w-full">
      <div class="flex flex-col gap-8 md:w-1/2">
        <article class="relative flex flex-col gap-3 mt-2 lg:mt-0 lg:pl-16">
          <span
            class="absolute -top-10 lg:top-1 left-0 flex items-center justify-center size-7 border-2 border-dunor-black rounded-full font-semibold"
            >1</span
          >
          <h2 class="text-2xl font-medium text-dunor-black">
            Información del cliente
            <span class="block text-base font-normal">Dirección entrega</span>
          </h2>
          <form id="step-info" class="flex flex-col gap-4 max-w-md">
            <InputField
              label="Nombre y Apellidos"
              type="text"
              id="fullName"
              name="fullName"
              value={fullName}
              title="Debe contener solo letras y tener entre 6 y 50 caracteres."
              pattern="[a-zA-ZáéíóúÁÉÍÓÚÜ ']{6,50}"
              placeholder="e.j. José Pérez"
            />
            <InputField
              label="Correo Eletrónico"
              type="email"
              id="email"
              name="email"
              value={email}
              title="Debe ser un correo electrónico válido."
              pattern="[a-z0-9._]+@[a-z0-9.]+\.[a-z]{2,4}"
              placeholder="joseperez@gmail.com"
            />
            <div class="flex gap-3">
              <!-- <InputField
                label="Dirección"
                type="text"
                id="address"
                name="address"
                placeholder="Cl. 100 #70 - 140"
              /> -->
              <InputField
                label="Teléfono"
                type="tel"
                id="phone"
                name="phone"
                title="Debe ser un número de teléfono válido."
                pattern="[0-9]{10}"
                placeholder="3001234567"
              />
            </div>
            <Button id="next-step" data-step="payment" type="submit">Siguiente</Button>
          </form>
        </article>
        <hr />
        <article class="relative flex flex-col gap-3 mt-10 lg:mt-0 lg:pl-16">
          <span
            class="absolute -top-10 lg:top-1 left-0 flex items-center justify-center size-7 border-2 border-dunor-black rounded-full font-semibold"
            >2</span
          >
          <h2 class="text-2xl font-medium text-dunor-black">
            Formas de Pago
            <span class="block text-base font-normal">Métodos de pago seguros</span>
          </h2>
          {
            paymentAvailable && (
              <form id="step-payment" class="flex flex-col gap-4 max-w-md hidden">
                <InputField
                  label="Nombre del titular"
                  type="text"
                  id="cardName"
                  name="cardName"
                  placeholder="José Pérez"
                  title="Debe contener solo letras y tener entre 6 y 50 caracteres."
                  pattern="[a-zA-ZáéíóúÁÉÍÓÚÜ ']{6,50}"
                />
                <InputField
                  label="Número de tarjeta"
                  type="text"
                  id="cardNumber"
                  name="cardNumber"
                  placeholder="1234 5678 9012 3456"
                  title="Debe ser un número de tarjeta válido."
                  pattern="[0-9]{16}"
                />
                <div class="flex gap-3">
                  <InputField
                    label="Fecha de expiración"
                    type="text"
                    id="cardExpiration"
                    name="cardExpiration"
                    placeholder="MM/AA"
                    title="Debe ser una fecha válida."
                    pattern="[0-9]{4}"
                  />
                  <InputField
                    label="CVC / CVV"
                    type="number"
                    id="cardCvv"
                    name="cardCvv"
                    placeholder="123"
                    title="Debe ser un número entre 3 y 4 dígitos."
                    pattern="[0-9]{3,4}"
                  />
                </div>
                <Button type="submit">Pagar</Button>
              </form>
            )
          }
          <form id="step-payment" class="flex flex-col gap-4 max-w-md hidden">
            <input type="hidden" name="userId" value={userId} />
            <div class="text-neutral-600 text-pretty">
              <p>Actualmente aceptamos pagos en persona en nuestra tienda.</p>
              <p>Acércate a nuestra tienda para realizar tu pago.</p>
            </div>
            <Button type="submit">Reservar</Button>
          </form>
        </article>
      </div>
      <aside class="md:grow relative md:sticky md:top-10 h-fit">
        <article class="flex flex-col gap-3">
          <h2 class="flex items-center gap-2 text-xl font-semibold text-dunor-black">
            <svg xmlns="http://www.w3.org/2000/svg" fill="none" class="w-7 h-7">
              <use xlink:href="/icons/header.svg#cart"></use>
            </svg>
            <span>Tu Pedido</span>
          </h2>
          <div class="flex flex-col gap-4">
            <div class="flex flex-wrap items-center justify-between py-5">
              <span class="text-sm font-light"> Artículo/s en tu carrito por valor de</span>
              <span data-price class="text-sm text-dunor-black font-medium">$ 100.000COP</span>
            </div>
            <div class="flex items-center justify-between py-5 border-y-2 border-dunor-black">
              <span class="text-lg text-dunor-black font-medium">Subtotal</span>
              <span data-price class="text-xl text-dunor-black font-medium">$ 100.000COP</span>
            </div>
          </div>
        </article>
      </aside>
      <Toast />
    </section>
  </main>
</Layout>

<script>
  import { getCart, getSubtotal, clearCart } from "@lib/cart"

  const nextStepButton = document.getElementById("next-step")!
  nextStepButton.addEventListener("click", ev => {
    const parentForm = nextStepButton.closest("form") as HTMLFormElement
    if (parentForm.checkValidity()) {
      ev.preventDefault()
      const step = nextStepButton.getAttribute("data-step")
      const form = document.querySelector(`form#step-${step}`) as HTMLFormElement
      if (form) {
        form.classList.remove("hidden")
        form.scrollIntoView({ behavior: "smooth" })
        nextStepButton.classList.add("hidden")
      }
    }
  })

  const userInfoForm = document.querySelector("form#step-info")! as HTMLFormElement
  const paymentForm = document.querySelector("form#step-payment")! as HTMLFormElement
  paymentForm.addEventListener("submit", placeOrder)

  async function placeOrder(ev: SubmitEvent) {
    ev.preventDefault()
    const userData = new FormData(userInfoForm)
    const paymentData = new FormData(paymentForm)

    const fullName = userData.get("fullName")
    const email = userData.get("email")
    const phone = userData.get("phone")

    const userId = paymentData.get("userId")
    // const cardName = paymentData.get("cardName")
    // const cardNumber = paymentData.get("cardNumber")
    // const cardExpiration = paymentData.get("cardExpiration")
    // const cardCvv = paymentData.get("cardCvv")

    if (!fullName || !email || !phone) {
      return document.dispatchEvent(
        new CustomEvent("show-toast", {
          detail: "Por favor, completa todos los campos."
        })
      )
    }

    // if(!cardName || !cardNumber || !cardExpiration || !cardCvv) {
    //   return document.dispatchEvent(
    //     new CustomEvent("show-toast", {
    //       detail: "Por favor, completa todos los campos."
    //     })
    //   )
    // }

    const userInfo = { fullName, email, phone }
    // const paymentInfo = {
    //   cardName,
    //   cardNumber,
    //   cardExpiration,
    //   cardCvv
    // }

    const productsInCart = getCart().map(product => ({
      id: product.id,
      quantity: product.quantity
    }))

    const response = await fetch("/api/orders", {
      method: "POST",
      headers: {
        "Content-Type": "application/json"
      },
      body: JSON.stringify({
        userId,
        status: "reserved",
        total: getSubtotal(),
        productsInCart,
        userInfo
      })
    })
    if (!response.ok) {
      return document.dispatchEvent(
        new CustomEvent("show-toast", {
          detail: "Ha ocurrido un error. Por favor, intenta de nuevo."
        })
      )
    }

    clearCart()
  }

  window.addEventListener("cart:cleared", () => {
    document.dispatchEvent(
      new CustomEvent("show-toast", {
        detail: "Tu pedido ha sido reservado. Acércate a nuestra tienda para realizar tu pago."
      })
    )
    setTimeout(() => {
      location.href = "/account"
    }, 2500)
  })

  // update subtotal on page load
  document.addEventListener("DOMContentLoaded", () => {
    const subtotal = getSubtotal()
    const subtotalElements = document.querySelectorAll("span[data-price]")
    subtotalElements.forEach(el => (el.textContent = `$ ${subtotal}COP`))
  })
</script>
